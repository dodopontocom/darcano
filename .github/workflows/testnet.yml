name: Init Cloud (GCP only)

on:
  push:
    branches:
      - terraforming
      - terraforming-v0.6
      - develop

env:
  PROJECT_ID: theta-inkwell-326216
  GCLOUD_TF_BUCKET_NAME: darcano-terraform-state
  GCLOUD_PROJECT_REGION: us-central1
  GCLOUD_SA_KEY: ${{ secrets.GCLOUD_SA_KEY }}
  DARLENE1_TOKEN: ${{ secrets.DARLENE1_TOKEN }}
  DARCANO_TOKEN: ${{ secrets.DARCANO_TOKEN }}
  TELEGRAM_ID: ${{ secrets.TELEGRAM_ID }}
  COLD_DELEG_CERT: ${{ secrets.COLD_DELEG_CERT }}
  COLD_NODE_CERT: ${{ secrets.COLD_NODE_CERT }}
  COLD_NODE_COUNTER: ${{ secrets.COLD_NODE_COUNTER }}
  COLD_NODE_SKEY: ${{ secrets.COLD_NODE_SKEY }}
  COLD_NODE_VKEY: ${{ secrets.COLD_NODE_VKEY }}
  COLD_PAY_ADDR: ${{ secrets.COLD_PAY_ADDR }}
  COLD_PAY_SKEY: ${{ secrets.COLD_PAY_SKEY }}
  COLD_PAY_VKEY: ${{ secrets.COLD_PAY_VKEY }}
  COLD_POOL_CERT: ${{ secrets.COLD_POOL_CERT }}
  COLD_STAKE_ADDR: ${{ secrets.COLD_STAKE_ADDR }}
  COLD_STAKE_CERT: ${{ secrets.COLD_STAKE_CERT }}
  COLD_STAKE_SKEY: ${{ secrets.COLD_STAKE_SKEY }}
  COLD_STAKE_VKEY: ${{ secrets.COLD_STAKE_VKEY }}
  EVOLVING_SKEY: ${{ secrets.EVOLVING_SKEY }}
  EVOLVING_VKEY: ${{ secrets.EVOLVING_VKEY }}
  VRF_SKEY: ${{ secrets.VRF_SKEY }}
  VRF_VKEY: ${{ secrets.VRF_VKEY }}
  POOL_METADATA_HASH: ${{ secrets.POOL_METADATA_HASH }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    environment: dev
    strategy:
      fail-fast: false

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GCLOUD_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true
        
    - name: Setup GCP
      run: |
        #TODO: check if bucket already exists: https://docs.github.com/en/actions/learn-github-actions/environment-variables
        #gsutil mb -l ${GCLOUD_PROJECT_REGION} -p ${PROJECT_ID} -c standard gs://${GCLOUD_TF_BUCKET_NAME}
        
  terraform:
    name: Terraform
    needs: setup
    runs-on: ubuntu-latest
    environment: dev
    strategy:
      fail-fast: false

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GCLOUD_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true

    - name: get commit message
      run: |
         echo ::set-env name=commit_msg::$(git log --format=%B -n 1 ${{ github.event.after }})
    
    - name: Create Dev
      if: "contains( env.commit_msg, '[terraform-apply]')"
      run: |
          echo "${GCLOUD_SA_KEY}" > cloud/credentials/credential.json
          export TF_VAR_DARLENE1_TOKEN=${DARLENE1_TOKEN}
          export TF_VAR_DARCANO_TOKEN=${DARCANO_TOKEN}
          export TF_VAR_TELEGRAM_ID=${TELEGRAM_ID}
          export TF_VAR_COLD_DELEG_CERT=${COLD_DELEG_CERT}
          export TF_VAR_COLD_NODE_CERT=${COLD_NODE_CERT}
          export TF_VAR_COLD_NODE_COUNTER=${COLD_NODE_COUNTER}
          export TF_VAR_COLD_NODE_SKEY=${COLD_NODE_SKEY}
          export TF_VAR_COLD_NODE_VKEY=${COLD_NODE_VKEY}
          export TF_VAR_COLD_PAY_ADDR=${COLD_PAY_ADDR}
          export TF_VAR_COLD_PAY_SKEY=${COLD_PAY_SKEY}
          export TF_VAR_COLD_PAY_VKEY=${COLD_PAY_VKEY}
          export TF_VAR_COLD_POOL_CERT=${COLD_POOL_CERT}
          export TF_VAR_COLD_STAKE_ADDR=${COLD_STAKE_ADDR}
          export TF_VAR_COLD_STAKE_CERT=${COLD_STAKE_CERT}
          export TF_VAR_COLD_STAKE_SKEY=${COLD_STAKE_SKEY}
          export TF_VAR_COLD_STAKE_VKEY=${COLD_STAKE_VKEY}
          export TF_VAR_EVOLVING_SKEY=${EVOLVING_SKEY}
          export TF_VAR_EVOLVING_VKEY=${EVOLVING_VKEY}
          export TF_VAR_VRF_SKEY=${VRF_SKEY}
          export TF_VAR_VRF_VKEY=${VRF_VKEY}
          export TF_VAR_POOL_METADATA_HASH=${POOL_METADATA_HASH}
          
          cd cloud/terraform
          terraform init --backend-config="bucket=${GCLOUD_TF_BUCKET_NAME}" --backend-config="prefix=tf-state"
          terraform plan
          terraform apply --auto-approve
          
    - name: Shutdown Dev Box
      if: "contains( env.commit_msg, '[terraform-destroy]')"
      run: |
          echo "${GCLOUD_SA_KEY}" > cloud/credentials/credential.json
          export TF_VAR_DARLENE1_TOKEN=${DARLENE1_TOKEN}
          export TF_VAR_DARCANO_TOKEN=${DARCANO_TOKEN}
          export TF_VAR_TELEGRAM_ID=${TELEGRAM_ID}
          export TF_VAR_COLD_DELEG_CERT=${COLD_DELEG_CERT}
          export TF_VAR_COLD_NODE_CERT=${COLD_NODE_CERT}
          export TF_VAR_COLD_NODE_COUNTER=${COLD_NODE_COUNTER}
          export TF_VAR_COLD_NODE_SKEY=${COLD_NODE_SKEY}
          export TF_VAR_COLD_NODE_VKEY=${COLD_NODE_VKEY}
          export TF_VAR_COLD_PAY_ADDR=${COLD_PAY_ADDR}
          export TF_VAR_COLD_PAY_SKEY=${COLD_PAY_SKEY}
          export TF_VAR_COLD_PAY_VKEY=${COLD_PAY_VKEY}
          export TF_VAR_COLD_POOL_CERT=${COLD_POOL_CERT}
          export TF_VAR_COLD_STAKE_ADDR=${COLD_STAKE_ADDR}
          export TF_VAR_COLD_STAKE_CERT=${COLD_STAKE_CERT}
          export TF_VAR_COLD_STAKE_SKEY=${COLD_STAKE_SKEY}
          export TF_VAR_COLD_STAKE_VKEY=${COLD_STAKE_VKEY}
          export TF_VAR_EVOLVING_SKEY=${EVOLVING_SKEY}
          export TF_VAR_EVOLVING_VKEY=${EVOLVING_VKEY}
          export TF_VAR_VRF_SKEY=${VRF_SKEY}
          export TF_VAR_VRF_VKEY=${VRF_VKEY}
          export TF_VAR_POOL_METADATA_HASH=${POOL_METADATA_HASH}
          
          cd cloud/terraform
          terraform init --backend-config="bucket=${GCLOUD_TF_BUCKET_NAME}" --backend-config="prefix=tf-state"
          terraform destroy --auto-approve

          message="Destroy complete!"
          curl -s -X POST https://api.telegram.org/bot${DARLENE1_TOKEN}/sendMessage -d chat_id=${TELEGRAM_ID} -d text="${message}"
          
    - name: Prompt Message
      if: "! contains( env.commit_msg, '[terraform-apply]') && !contains( env.commit_msg, '[terraform-destroy]')"
      run: |
          echo "No terraform flag was detected to run functionalities!!!"
